//
//  HomeViewModel.swift
//  YandexHomework
//
//  Created by Fedor Penin on 04.08.2022.
//

import UIKit
import CocoaLumberjack

final class HomeViewModel {

    // MARK: - Public properties

    weak var view: HomeViewControllerProtocol?

    var data: [TodoViewModel] = [] {
        didSet {
            DispatchQueue.main.async {
                self.setupHeader()
            }
        }
    }

    // MARK: - private properties

    private var isHidden = true

    private let fileName = "development.json"

    private lazy var fileCache: FileCacheServiceProtocol = FileCacheService(fileName: fileName)

    private let mockNetwork: NetworkServiceProtocol = MockNetworkService()
}

// MARK: - HomeViewModelDelegate

extension HomeViewModel: HomeViewModelDelegate {

    func didUpdate(model: TodoViewModel, state: TodoViewState) {
        let newItem = TodoItem(
            id: model.item.id,
            text: state.text,
            importancy: state.importancy,
            deadline: state.deadline,
            isFinished: state.isFinished,
            createdAt: state.createdAt,
            changedAt: state.changedAt
        )

        mockNetwork.editTodoItem(newItem) { [weak self] res in
            switch res {
            case let .success(updatedItem):
                self?.update(with: updatedItem, model: model)
                DDLogError("–ù–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞")
                self?.view?.reloadData()
            case .failure:
                DDLogError("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É")
            }
        }
    }

    func didDelete(model: TodoViewModel) {
        mockNetwork.deleteTodoItem(at: model.item.id) { [weak self] res in
            switch res {
            case .success:
                guard let self = self else { return }
                try? self.fileCache.remove(by: model.item.id)
                self.saveItems()
                self.data.removeAll { $0.item.id == model.item.id }
                self.view?.items = self.data
                DDLogError("–≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞")
                self.view?.reloadData()
            case let .failure(error):
                DDLogError(error)
            }
        }
    }
}

// MARK: - HomeViewModelProtocol

extension HomeViewModel: HomeViewModelProtocol {

    func viewDidLoad() {
        fetchItems()
    }

    func createTask(with text: String) {
        let newModel = TodoViewModel(item: TodoItem(text: text))
        data.append(newModel)
        try? fileCache.add(item: newModel.item)

        mockNetwork.editTodoItem(newModel.item) { [weak self] res in
            guard let self = self else { return }
            switch res {
            case .success:
                self.saveItems()
                self.view?.items = self.data
                DDLogError("–ù–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞")
                self.view?.insertRow(at: IndexPath(row: self.data.count - 1, section: 0))
            case .failure:
                DDLogError("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É")
            }
        }
    }

    func delete(at indexPath: IndexPath) {
        guard let view = view else { return }
        let idx = isHidden ? data[indexPath.row].item.id : view.items[indexPath.row].item.id

        mockNetwork.deleteTodoItem(at: idx) { [weak self] res in
            guard let self = self else {
                DDLogError("error")
                return
            }
            switch res {
            case .success:
                if !self.isHidden {
                    let id = view.items[indexPath.row].item.id
                    try? self.fileCache.remove(by: id)
                    self.data.removeAll { $0.item.id == id }
                    view.items.remove(at: indexPath.row)
                } else {
                    try? self.fileCache.remove(by: self.data[indexPath.row].item.id)
                    self.data.remove(at: indexPath.row)
                    view.items = self.data
                }
                self.saveItems()
                view.deleteRow(at: indexPath)
            case let .failure(error):
                DDLogError(error)
            }
        }
        setupHeader()
    }

    func toggleCompletedTasks() {
        let sorted = data.filter { !$0.item.isFinished  }
        let cleaned = data.enumerated().compactMap { $0.element.item.isFinished ? $0.offset : nil }
        let indices = cleaned.compactMap { IndexPath(row: $0, section: 0) }

        if isHidden {
            view?.items = sorted
            view?.deleteRows(at: indices)
        } else {
            view?.items = data
            view?.insertRows(at: indices)
        }
        isHidden.toggle()
        setupHeader()
    }

    func toggleStatus(on model: TodoViewModel, at: IndexPath) {
        mockNetwork.editTodoItem(model.item) { [weak self] res in
            switch res {
            case .success:
                guard let self = self,
                      let view = self.view
                else { return }

                if !self.isHidden {
                    model.state.isFinished.toggle()
                    model.item = model.item.toggleComplete()
                    try? self.fileCache.change(item: model.item)
                    self.saveItems()
                    view.items.remove(at: at.row)
                } else {
                    model.state.isFinished.toggle()
                    model.item = model.item.toggleComplete()
                    try? self.fileCache.change(item: model.item)
                    self.saveItems()
                }
                if !self.isHidden {
                    view.deleteRow(at: at)
                } else {
                    view.reloadRow(at: at)
                }
                self.setupHeader()
            case let .failure(error):
                DDLogError(error)
            }
        }
    }

    func openModal(with model: TodoViewModel? = nil) {
        guard let model = model else {
            let newModel = TodoViewModel(item: TodoItem(text: ""))
            newModel.delegate = self
            let controller = TodoModalViewController(viewModel: newModel)
            newModel.modal = controller
            let navigationController = UINavigationController(rootViewController: controller)
            view?.present(modal: navigationController)
            return
        }

        let controller = TodoModalViewController(viewModel: model)
        model.modal = controller
        let navigationController = UINavigationController(rootViewController: controller)
        view?.present(modal: navigationController)
    }

    func setupHeader() {
        let filtered = data.filter { $0.item.isFinished  }
        let amount = filtered.count
        view?.setupHeader(title: isHidden ? "–ü–æ–∫–∞–∑–∞—Ç—å" : "–°–∫—Ä—ã—Ç—å", amount: amount)
    }
}

// MARK: - Private methods

private extension HomeViewModel {

    // MARK: - Fetch items -
    func fetchItems() {
        mockNetwork.getAllTodoItems { [weak self] res in
            switch res {
            case let .success(networkItems):
                DDLogInfo("–ó–∞–≥—Ä—É–∑–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Ç–∏. –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à")
                networkItems.forEach {
                    try? self?.fileCache.add(item: $0)
                }
                self?.parse(items: networkItems)
            case .failure:
                DDLogError("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–µ—Ç–∏, —á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞")
                guard let filename = self?.fileName else { return }
                self?.fileCache.load(from: filename) { result in
                    switch result {
                    case let .success(fileItems):
                        DDLogInfo("–ó–∞–≥—Ä—É–∑–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞")
                        self?.parse(items: fileItems)
                    case let .failure(error):
                        DDLogError(error.localizedDescription)
                    }
                }
            }
        }
    }

    // MARK: - Save items -
    func saveItems() {
        fileCache.save(to: fileName) { result in
            switch result {
            case .success:
                DDLogInfo("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª")
            case let .failure(error):
                DDLogError(error)
            }
        }
    }

    // MARK: - Parse data -
    func parse(items: [TodoItem]) {
        if items.isEmpty {
            DDLogInfo("–ù–∞–±–æ—Ä –ø—É—Å—Ç–æ–π. –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π")
            let startArray = getStartArray()
            startArray.forEach {
                try? fileCache.add(item: $0)
            }
        }
        saveItems()
        data = items.map { TodoViewModel(item: $0) }
        data.forEach {
            $0.delegate = self
        }
        view?.items = data
        view?.reloadData()
    }

    func update(with item: TodoItem, model: TodoViewModel) {
        let isExist = data.contains { $0.item.id == item.id  }
        if isExist {
            try? fileCache.change(item: item)
        } else {
            data.append(model)
            try? fileCache.add(item: item)
        }
        saveItems()
        view?.items = data
    }

    // MARK: - Default info
    func getStartArray() -> [TodoItem] {
        return [
            TodoItem(
                text: "–û—Ç–¥–æ—Ö–Ω—É—Ç—å –æ—Ç –ø—Ä–æ–≥–∏üôÑ",
                importancy: .important,
                deadline: Date(timeIntervalSince1970: 1658917535.767741),
                isFinished: false
            ),
            TodoItem(
                text: "–°–≥–æ–Ω—è—Ç—å –≤ –±–∞—Ä, –∫—É–ø–∏—Ç—å –ø–∏–≤–∫–∞, —Ä—ã–±–∫–∏, –∫—Ä–µ–∫–µ—Ä–æ–≤ –∏ –≤—Å–µ–≥–æ —Ç–æ–≥–æ, —á—Ç–æ –º–æ–∂–µ—Ç —Å–ø–∞—Å—Ç–∏ –Ω–∞—à–∏ –±—Ä–µ–Ω–Ω—ã–µ –¥—É—à–∏ –æ—Ç –±—ã—Ç–∏—è –Ω–∞—Å—É—â–Ω–æ–≥–æ...",
                importancy: .important,
                deadline: nil,
                changedAt: Date(timeIntervalSince1970: 1658917535.767741)
            ),
            TodoItem(
                text: "–ë—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∏ —É–º—á–∞—Ç—å –≤ –∑–∞–∫–∞—Ç –∫—É–¥–∞-–Ω–∏—Ç—å –≤ –ì—Ä—É–∑–∏—é. ",
                importancy: .important,
                deadline: Date(timeIntervalSince1970: 1658917535.767741),
                isFinished: true
            ),
            TodoItem(
                text: "–Ω–µ –∑–∞–±—ã—Ç—å –≤—Å–µ-—Ç–∞–∫–∏ –ø–æ–∫—É—à–∞—Ç—åüôÑüôÑüôÑ",
                importancy: .normal,
                deadline: Date(timeIntervalSince1970: 1658917535.767741),
                isFinished: true
            ),
            TodoItem(
                text: "–°–¥–µ–ª–∞—Ç—å —ç–∫—Ä–∞–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏. –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (—Ñ—Ä–µ–π–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤–æ—Ä–æ—Ç–æ–≤ (–≤ —Ç–æ–º —á–∏—Å–ª–µ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π) —Å–æ–±–ª—é–¥–∞–π—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
                importancy: .normal,
                deadline: nil,
                changedAt: Date(timeIntervalSince1970: 1658917535.767741)
            ),
            TodoItem(
                text: "—Å–¥–µ–ª–∞—Ç—å —ç–∫—Ä–∞–Ω —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–º–µ—Ç–æ–∫. –≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫, –æ—Ç–º–µ—Ç–∫—É ‚Äú–≤—ã–ø–æ–ª–Ω–µ–Ω–æ‚Äù, etc –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π; –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–æ–≤–∞–Ω–æ —Å –º–æ–¥–µ–ª—å—é —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å navigation controller large titles",
                importancy: .important,
                createdAt: Date(timeIntervalSince1970: 1658917535.767741),
                changedAt: Date(timeIntervalSince1970: 1658917535.767741)
            )
        ]
    }
}
